/*

Copyright (C) 2015, Stefan Jänicke.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

1. The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

2. It is prohibited to remove, hide or modify any visual copyright notice
generated by this Software.

3. When using screenshots of any part of the visual output generated by
this Software for presentations or on websites the following link MUST
be clearly visible for the beholder: http://tagpies.vizcovery.org

4. When using screenshots of any part of the visual output generated by
this Software in publications, the following reference MUST be inserted: 

S. Jänicke, J. Blumenstein, M. Rücker, D. Zeckzer and G. Scheuermann (2015). 
Visualizing the Results of Search Queries on Ancient Text Corpora with Tag Pies. 
Digital Humanities Quarterly.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(Fair Academic License (FAL), http://vizcovery.org/fal.html)

*/

function TagPie(divId, facets, config) {

	var options = {
		style: "basic",
		font: "Georgia",
		number_of_tags: 500,
		edit_distance: 0.4,
		colors: [
			"#d95f02",
			"#1b9e77",
			"#984ea3",
			"#377eb8",
			"#e41a1c",
			"#E6C300",
			"#4daf4a",
			"#e7298a",
			"#7570b3",
			"#ff7f00",
			"#66a61e",
			"#e6ab02",
			"#f781bf",
			"#a65628",
		]
	};
	$.extend(options,config);

	$("#tagpietooltip").remove();

	var globalHash = [];
	var rid = 1;
	var majors = [];
	var allf = 0;
	var maxFreq = 0;
	var minFreq = Infinity;
	var data_facets = [];

	for(var i = 0; i < facets.length; i++) {
		data_facets.push([]);
		var f = facets[i];
		majors.push(f.major);
		f.major.id = rid++;
		allf += f.major.value;
		f.major.majvalue = f.major.value;
		f.major.facet = i + 1;
		f.major.priority = facets.length;
		globalHash[f.major.id] = f.major;
		if(f.major.value > maxFreq) {
			maxFreq = f.major.value;
		}
		if(f.major.value < minFreq) {
			minFreq = f.major.value;
		}
		for(var j = 0; j < f.data.length; j++) {
			var tag = f.data[j];
			tag.facet = i + 1;
			tag.major = f.major.id;
			tag.id = rid++;
		}
	}

	var sortData1 = function(w1, w2) {
		if(w1.value > w2.value) {
			return -1;
		}
		if(w1.value == w2.value) {
			return 0;
		}
		return 1;
	}

	var tags1 = [];
	for(var i = 0; i < facets.length; i++) {
		var not = Math.round(facets[i].major.value / allf * options.number_of_tags);
		if(not < 5) not = 5;
		facets[i].data.sort(sortData1);
		tags1 = tags1.concat(facets[i].data.slice(0, not));
	}
	tags1.sort(sortData1);

	var prioHash = [];
	var freqHash = [];
	for(var i = 0; i < tags1.length; i++) {
		var word = tags1[i];
		globalHash[word.id] = word;
		if(typeof prioHash[word.key] == "undefined") {
			prioHash[word.key] = [];
			freqHash[word.key] = 0;
		}
		prioHash[word.key].push(word);
		freqHash[word.key] += word.value;
		if(word.value > maxFreq) {
			maxFreq = word.value;
		}
		if(word.value < minFreq) {
			minFreq = word.value;
		}
	}

	for(var i = 0; i < tags1.length; i++) {
		var p = prioHash[tags1[i].key].length;
		if(p == 1) {
			tags1[i].priority = facets.length + 1;
		}
		else {
			tags1[i].priority = facets.length - p;
		}
		var sum = 0;
		for(var j = 0; j < prioHash[tags1[i].key].length; j++) {
			sum += prioHash[tags1[i].key][j].value;
		}
		tags1[i].frequency = freqHash[tags1[i].key];
		tags1[i].multiplicity = p;
		tags1[i].facets = {
			v: sum,
			f: []
		};
		for(var j = 0; j < prioHash[tags1[i].key].length; j++) {
			tags1[i].facets.f.push(prioHash[tags1[i].key][j].id);
		}
	}

	var sortData2 = function(w1, w2) {
		if(w1.priority < w2.priority) {
			return -1;
		}
		if(w1.priority == w2.priority && w1.frequency > w2.frequency) {
			return -1;
		}
		return 1;
	}
	tags1.sort(sortData2);

	if(options.style == "merged" || options.style == "merged-black") {
		var tags_new = [];
		for(var i = 0; i < tags1.length; i++) {
			var t1 = tags1[i];
			var f = false;
			for(var j = 0; j < tags_new.length; j++) {
				var t2 = tags_new[j];
				if(t1.key == t2.key) {
					f = true;
					t2.facets.push({
						facet: t1.facet,
						value: t1.value,
						d: t1
					});
					t2.value += t1.value;
					if(t2.value > maxFreq) {
						maxFreq = t2.value;
					}
					var inc = 0;
					for(var k = 0; k < t2.facets.length; k++) {
						t2.facets[k].maj = false;
						if(t2.facets[k].value > inc) {
							inc = t2.facets[k].value;
							t2.facet = t2.facets[k].facet;
						}
					}
					for(var k = 0; k < t2.facets.length; k++) {
						if(t2.facets[k].facet == t2.facet) {
							t2.facets[k].maj = true;
						}
					}
				}
			}
			if(!f) {
				var t = {
					key: t1.key,
					value: t1.value,
					facet: t1.facet,
					major: t1.major,
					facets: [{
						facet: t1.facet,
						value: t1.value,
						d: t1
					}]
				};
				tags_new.push(t);
			}
		}
		tags1 = tags_new;
		var sortFacets = function(f1, f2) {
			if(f1.maj) return -1;
			if(f1.value >= f2.value) return -1;
			return 1;
		}
		for(var i = 0; i < tags1.length; i++) {
			tags1[i].facets.sort(sortFacets);
		}
	}

	for(var i = 0; i < tags1.length; i++) {
		data_facets[tags1[i].facet - 1].push(tags1[i]);
	}

	for(var i = 0; i < data_facets.length; i++) {
		var breakpoint = Math.round(tags1.length / data_facets[i].length);
		var runs = data_facets[i].length;
		if(runs == 0) continue;
		var facet = data_facets[i][0].facet;
		for(var j = 0; j < runs; j++) {
			var e = Math.round((j + 1) * breakpoint);
			var num = 0;
			if(e > tags1.length) {
				e = tags1.length;
			}
			for(var k = 0; k < e; k++) {
				if(tags1[k].facet == facet) num++;
			}
			if(num < j + 1) {
				var delta = (j + 1) - num;
				var pre = [];
				var pos = [];
				var ins1 = [];
				var ins2 = [];
				var poses = [];
				for(var k = e - 1; k > -1; k--) {
					if(tags1[k].facet != facet) {
						pos.push({
							p: k,
							tag: tags1[k]
						});
						ins1.push(tags1[k]);
						poses.push(k);
						if(pos.length == delta) {
							break;
						}
					}
				}
				for(var k = e; k < tags1.length; k++) {
					if(tags1[k].facet == facet) {
						pre.push({
							p: k,
							tag: tags1[k]
						});
						ins2.push(tags1[k]);
						poses.push(k);
						if(pre.length == delta) {
							break;
						}
					}
				}
				var ins = ins2.concat(ins1);
				for(var k = poses.length; k > 0; k--) {
					tags1.splice(poses[k - 1], 1);
				}
				tags1 = tags1.slice(0, e - delta).concat(ins).concat(tags1.slice(e - delta));
			}
		}
	}
	tags1 = majors.sort(sortData1).concat(tags1);

	var clearData = function(tags){
		for( var i=0; i<tags.length; i++ ){
			for( var key in tags[i] ){
				if( key != "facet" && key != "id" && key != "key" && key != "major" && key != "frequency" && key != "facets" && key != "multiplicity" && key != "value" && key != "majvalue" ){
					tags[i][key] = undefined;
				}
			}
		}
	}
	clearData(tags1);

	var width = $(window).height();
	var height = $(window).height();

	var colors = options.colors;

	var Hsv2rgb = function(h,s,v){
		var r, g, b;
		var var_h = h * 6;
		if(var_h==6){
			var_h = 0;
		}
		var var_i = Math.floor( var_h );
		var var_1 = v*(1-s);
		var var_2 = v*(1-s*(var_h-var_i));
		var var_3 = v*(1-s*(1-(var_h-var_i)));
		if(var_i==0) { 
			var_r = v; 
			var_g = var_3; 
			var_b = var_1;
		}
		else if(var_i==1) {
			var_r = var_2;
			var_g = v;
			var_b = var_1;
		}
		else if(var_i==2) {
			var_r = var_1;
			var_g = v;
			var_b = var_3
		}
		else if(var_i==3){
			var_r = var_1;
			var_g = var_2;
			var_b = v;
		}
		else if(var_i==4){
			var_r = var_3;
			var_g = var_1;
			var_b = v;
		}
		else{
			var_r = v;
			var_g = var_1;
			var_b = var_2
		}
		return "rgb("+Math.round(var_r*255)+","+Math.round(var_g*255)+","+Math.round(var_b*255)+")";
	};
	for( var i=colors.length; i<facets.length; i++ ){
		colors.push(Hsv2rgb(((Math.random()*360)+1)/360,1,(25 + (Math.random()*50)+1)/100));
	}

	// eXChange requirements
	this.globalHash = globalHash;
	this.colors = colors;

	var words = [],
		max,
		scale = 1,
		complete = 0,
		keyword = "",
		fontSize,
		font = options.font;

	var compact_layout = d3.layout.cloud()
		.timeInterval(10)
		.size([width * 20, height * 20])
		.fontSize(function(d) {
			return fontSize(+d.value);
		})
		.text(function(d) {
			if( d.key.indexOf(":") != -1 ){
				return d.key.split(":")[0];
			}
			return d.key;
		})
		.on("end", draw0);

	var div = d3.select("body").append("div")
		.attr("id", "tagpietooltip")
		.attr("class", "tooltip")
		.style("opacity", 0);

	function draw0(data, bounds) {
		var min_x = Infinity,
			max_x = 0;
		var min_y = Infinity,
			max_y = 0;
		for(var i = 0; i < data.length; i++) {
			var a = data[i];
			if(a.x < min_x) min_x = a.x;
			if(a.x > max_x) max_x = a.x;
			if(a.y < min_y) min_y = a.y;
			if(a.y > max_y) max_y = a.y;
		}
		var radius = (max_x - min_x) / 2;
		if(max_x - min_x < max_y - min_y) {
			radius = (max_y - min_y) / 2;
		}
		clearData(tags1);
		layout
			.font(font)
			.radius(radius)
			.rotate(0)
			.spiral("archimedean"); // "archimedean" or "rectangular"
		fontSize = d3.scale["log"]().range([10, 50]); // "linear", "sqrt" or "log"
		if(tags1.length) fontSize.domain([minFreq,maxFreq]);
		complete = 0;
		words = [];
		layout.stop().words(tags1).start();
	}

	var layoutType = "basic";
	if( data_facets.length > 1 ){
		layoutType = "pie";
	}

	var layout = d3.layout.cloud()
		.timeInterval(10)
		.type(layoutType)
		.style(options.style)
		.size([width * 20, height * 20])
		.fontSize(function(d) {
			return fontSize(+d.value);
		})
		.fontStyle(function(d) {
			return "italic";
		})
		.text(function(d) {
			if( d.key.indexOf(":") != -1 ){
				return d.key.split(":")[0];
			}
			return d.key;
		})
		.on("end", draw);

	var svg = d3.select("#" + divId).append("svg")
		.attr("width", width)
		.attr("height", height);

	var background = svg.append("g");
	var background2 = undefined;
	if(options.style == "bars") {
		background2 = svg.append("g");
	}
	var vis = svg.append("g").attr("transform", "translate(" + [width >> 1, height >> 1] + ")");

	function generate() {
		var l = compact_layout;
		l
			.font(font)
			.rotate(0)
			.spiral("archimedean"); // "archimedean" or "rectangular"
		fontSize = d3.scale["log"]().range([10, 50]); // "linear", "sqrt" or "log"
		if(tags1.length) fontSize.domain([+parseInt($("#input-field8").val()) || 1, +maxFreq]);
		complete = 0;
		words = [];
		l.stop().words(tags1).start();
	}

	var lineFunction = d3.svg.line()
		.x(function(d) {
			return d.x;
		})
		.y(function(d) {
			return d.y;
		})
		.interpolate("linear");

	var rects = [];

	function rounded_rect(x, y, w, h, r, tl, tr, bl, br) {
		var retval;
		retval = "M" + (x + r) + "," + y;
		retval += "h" + (w - 2 * r);
		if(tr) {
			retval += "a" + r + "," + r + " 0 0 1 " + r + "," + r;
		}
		else {
			retval += "h" + r;
			retval += "v" + r;
		}
		retval += "v" + (h - 2 * r);
		if(br) {
			retval += "a" + r + "," + r + " 0 0 1 " + -r + "," + r;
		}
		else {
			retval += "v" + r;
			retval += "h" + -r;
		}
		retval += "h" + (2 * r - w);
		if(bl) {
			retval += "a" + r + "," + r + " 0 0 1 " + -r + "," + -r;
		}
		else {
			retval += "h" + -r;
			retval += "v" + -r;
		}
		retval += "v" + (2 * r - h);
		if(tl) {
			retval += "a" + r + "," + r + " 0 0 1 " + r + "," + -r;
		}
		else {
			retval += "v" + -r;
			retval += "h" + r;
		}
		retval += "z";
		return retval;
	}

	function getEditDistance(a, b) {
		if(a.length === 0) {
			return b.length;
		}
		if(b.length === 0) {
			return a.length;
		}
		var matrix = [];
		var i;
		for(i = 0; i <= b.length; i++) {
			matrix[i] = [i];
		}
		var j;
		for(j = 0; j <= a.length; j++) {
			matrix[0][j] = j;
		}
		for(i = 1; i <= b.length; i++) {
			for(j = 1; j <= a.length; j++) {
				if(b.charAt(i - 1) == a.charAt(j - 1)) {
					matrix[i][j] = matrix[i - 1][j - 1];
				}
				else {
					matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, Math.min(matrix[i][j - 1] + 1, matrix[i - 1][j] + 1));
				}
			}
		}
		return matrix[b.length][a.length];
	}

	var over = false;

	function draw(data, bounds) {
		scale = bounds ? Math.min(
			width / Math.abs(bounds[1].x - width * 20 / 2),
			width / Math.abs(bounds[0].x - width * 20 / 2),
			height / Math.abs(bounds[1].y - height * 20 / 2),
			height / Math.abs(bounds[0].y - height * 20 / 2)) / 2 : 1;
		words = data;
		var text = vis.selectAll("text").data(words);
		text.transition()
			.duration(1000)
			.attr("transform", function(d) {
				return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
			})
			.style("font-size", function(d) {
				return d.size + "px";
			});
		text.enter().append("text")
			.attr("text-anchor", "middle")
			.attr("transform", function(d) {
				return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
			})
			.style("font-size", function(d) {
				return d.size + "px";
			})
			.on("click", function(d) {
				div.style("left", (d3.event.pageX + 15) + "px")
					.style("top", (d3.event.pageY + 15) + "px");
				div.transition()
					.duration(100)
					.style("opacity", 0.9);
				if( options.clickCallback ){
					options.clickCallback(d);
				}
			})
			.on("mouseout", function(d) {
				for(var i = 0; i < rects.length; i++) {
					rects[i].remove();
				}
				for(var i = 0; i < words.length; i++) {
					words[i].selected = -1;
					if((options.style == "merged" || options.style == "merged-black") && words[i].facets) {
						for(var j = 0; j < words[i].facets.length; j++) {
							words[i].facets[j].d.selected = -1;
						}
					}
					if(words[i].ulrect) {
						words[i].ulrect.attr("fill", colors[words[i].facet - 1]);
					}
				}
				d3.selectAll("text").style("fill", function(d) {
					if(options.style == "merged-black") {
						if(!d.major || d.facets.length == 1) return colors[d.facet - 1];
						return "#222";
					}
					if(d.selected == 1) return "#000";
					return colors[d.facet - 1];
				});
				div.transition()
					.duration(100)
					.style("opacity", 0);
			})
			.on("mouseover", function(d) {
				var coo = [];
				for(var i = 0; i < words.length; i++) {
					if(words[i].text == d.text && d.major || !d.major && !words[i].major) {
						words[i].selected = 1;
						var rect = background.append("path")
							.attr("d", function(d) {
								return rounded_rect(words[i].x - words[i].bbox.width / 2, words[i].y - 3 * words[i].size / 4, words[i].bbox.width, words[i].size, words[i].size / 5, true, true, true, true);
							})
							.attr("fill", colors[words[i].facet - 1])
							.attr("fill-opacity", 0.3)
							.attr("transform", "translate(" + [words[i].x, words[i].y] + ")rotate(" + words[i].rotate + ")")
							.attr("transform", "translate(" + [width >> 1, height >> 1] + ")scale(" + scale + ")");
						if(options.style == "merged" || options.style == "merged-black") {
							if(words[i].facets) {
								for(var j = 0; j < words[i].facets.length; j++) {
									coo.push(words[i].facets[j].d);
									words[i].facets[j].d.selected = 1;
								}
							}
							else {
								coo = majors;
							}
						}
						else {
							coo.push(words[i]);
						}
						rects.push(rect);
						if(words[i].ulrect) {
							words[i].ulrect.attr("fill", "black");
						}
					}
					else if(d.major && words[i].major) {
						var s = Math.min(Math.floor(words[i].text.length / 2), Math.floor(d.text.length / 2));
						if(words[i].text.substring(0, s) == d.text.substring(0, s)) {
							var ld = getEditDistance(words[i].text, d.text);
							var red = 2 * ld / (words[i].text.length + d.text.length);
							if(red <= options.edit_distance) {
								words[i].selected = 0;
								var rect = background.append("path")
									.attr("d", function(d) {
										return rounded_rect(words[i].x - words[i].bbox.width / 2, words[i].y - 3 * words[i].size / 4, words[i].bbox.width, words[i].size, words[i].size / 5, true, true, true, true);
									})
									.attr("fill", "#DDD")
									.attr("transform", "translate(" + [words[i].x, words[i].y] + ")rotate(" + words[i].rotate + ")")
									.attr("transform", "translate(" + [width >> 1, height >> 1] + ")scale(" + scale + ")");
								if(options.style == "merged" || options.style == "merged-black") {
									for(var j = 0; j < words[i].facets.length; j++) {
										coo.push(words[i].facets[j].d);
										words[i].facets[j].d.selected = 0;
									}
								}
								else {
									coo.push(words[i]);
								}
								rects.push(rect);
							}
							else {
								words[i].selected = -1;
							}
						}
						else {
							words[i].selected = -1;
						}
					}
				}
				d3.selectAll("text").style("fill", function(d) {
					if(d.selected == 1) return "#000";
					if(options.style == "merged-black") {
						if(!d.major || d.facets.length == 1) return colors[d.facet - 1];
						return "#222";
					}
					return colors[d.facet - 1];
				});
				div.html("<div class='facet'></div><div class='legend'></div><div class='chart'></div>");
				var max = 0;
				for(var i = 0; i < coo.length; i++) {
					if(d.major && coo[i].value > max) max = coo[i].value;
					if(!d.major && coo[i].majvalue > max) max = coo[i].majvalue;
				}
				var sortCoo = function(c1, c2) {
					if(c1.facet == d.facet && c2.facet != d.facet) {
						return -1;
					}
					if(c2.facet == d.facet && c1.facet != d.facet) {
						return 1;
					}
					if(c1.facet > c2.facet) {
						return -1;
					}
					if(c1.facet == c2.facet && c1.selected > c2.selected) {
						return -1;
					}
					if(c1.facet == c2.facet && c1.selected == c2.selected && c1.key == d.key) {
						return -1;
					}
					return 1;
				}
				if(!(options.style == "merged" || options.style == "merged-black")) {
					coo.sort(sortCoo);
				}

				var x = d3.scale.linear()
					.domain([0, max])
					.range([0, 200]);

				d3.select(".facet")
					.selectAll("div")
					.data(coo)
					.enter().append("div")
					.style("color", function(d) {
						return colors[d.facet - 1];
					})
					.text(function(d) {
						if(d.major) return globalHash[d.major].key;
						return d.key;
					});

				d3.select(".legend")
					.selectAll("div")
					.data(coo)
					.enter().append("div")
					//    .style("width", function(d) { return x(d.value) + "px"; })
					.style("color", function(d) {
						return colors[d.facet - 1];
					})
					.text(function(d) {
						return d.key;
					});

				d3.select(".chart")
					.selectAll("div")
					.data(coo)
					.enter().append("div")
					.style("width", function(d) {
						if(d.major) return x(d.value) + "px";
						return x(d.majvalue) + "px";
					})
					.style("background-color", function(d) {
						if(d.selected == 1) return colors[d.facet - 1];
						return "#DDD";
					})
					.style("color", function(d) {
						if(d.selected == 1) return "white";
						return "#333";
					})
					.style("border", function(d) {
						return "1px solid " + colors[d.facet - 1];
					})
					.text(function(d) {
						if(d.major) return d.value;
						return d.majvalue;
					});

				$(".legend").prepend("<div class='ttheader'>tag</div>");
				$(".chart").prepend("<div class='ttheader'>count</div>");
				if(d.major) {
					$(".facet").prepend("<div class='ttheader'>facet</div>");
				}
				else {
					$(".facet").prepend("<div class='ttheader'>category</div>");
					$(".legend").remove();
				}
			})

		.transition()
			.duration(1000)

		text.style("font-family", function(d) {
				return d.font;
			})
			.style("fill", function(d) {
				if(options.style == "merged-black") {
					if(!d.major || d.facets.length == 1) return colors[d.facet - 1];
					return "#222";
				}
				return colors[d.facet - 1];
			})
			.style("cursor", "default")
			.style("font-style", function(d) {
				if(options.style == "italics-bold" && d.multiplicity > 1) return "italic";
				if(options.style == "bold-italics" && d.multiplicity == 1) return "italic";
			})
			.style("font-weight", function(d) {
				if(!d.major) return "bold";
				else if(options.style == "italics-bold" && d.multiplicity == 1) return "bold";
				else if(options.style == "bold-italics" && d.multiplicity > 1) return "bold";
			})
			.style("text-decoration", function(d) {
				if(!(options.style == "merged" || options.style == "merged-black")) {
					if(!d.major) {
						return "underline";
					}
				}
			})
			.text(function(d) {
				return d.text;
			});

		var exitGroup = background.append("g")
			.attr("transform", vis.attr("transform"));
		var exitGroupNode = exitGroup.node();
		text.exit().each(function() {
			exitGroupNode.appendChild(this);
		});
		exitGroup.transition()
			.duration(1000)
			.style("opacity", 1e-6)
			.remove();
		vis.transition()
			.delay(1000)
			.duration(750)
			.attr("transform", "translate(" + [width >> 1, height >> 1] + ")scale(" + scale + ")");

		text.attr('bbox', function(d) {
			d.bbox = this.getBBox()
		});

		if(options.style == "bars") {
			text.append("svg:title").text(function(d) {
				if(d.facets && d.facets.f.length > 1) {
					var xs = d.x - d.bbox.width / 2,
						ys = d.y + 2;
					for(var i = 0; i < d.facets.f.length; i++) {
						var bar = background2.append("rect")
							.attr("x", xs)
							.attr("y", ys)
							.attr("width", globalHash[d.facets.f[i]].value / d.facets.v * d.bbox.width)
							.attr("height", 2)
							.attr("fill", colors[globalHash[d.facets.f[i]].facet - 1])
							.attr("transform", "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")")
							.attr("transform", "translate(" + [width >> 1, height >> 1] + ")scale(" + scale + ")");
						xs += globalHash[d.facets.f[i]].value / d.facets.v * d.bbox.width;
					}
					return "";
				}
			});
		}
		else if(options.style == "merged" || options.style == "merged-black") {
			text.append("svg:title").text(function(d) {
				if(d.facets && d.facets.length > 1) {
					var xs = d.x - d.bbox.width / 2,
						ys = d.y + 2;
					for(var i = 0; i < d.facets.length; i++) {
						var bar = background.append("rect")
							.attr("x", xs)
							.attr("y", ys)
							.attr("width", d.facets[i].value / d.value * d.bbox.width)
							.attr("height", 2)
							.attr("fill", colors[d.facets[i].facet - 1])
							.attr("transform", "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")")
							.attr("transform", "translate(" + [width >> 1, height >> 1] + ")scale(" + scale + ")");
						xs += d.facets[i].value / d.value * d.bbox.width;
					}
					return "";
				}
			});
		}
	}

	generate();

	/*

	d3.select("#download-svg").on("click", downloadSVG);
	d3.select("#download-png").on("click", downloadPNG);

			$("#export").css("display","block");

	<div id="export">Export TagPie: <a id="download-svg" href="#" target="_blank">SVG</a> | <a id="download-png" href="#" target="_blank">PNG</a><div>

	// Converts a given word cloud to image/png.
	function downloadPNG() {
	  var canvas = document.createElement("canvas"),
	      c = canvas.getContext("2d");
	  canvas.width = width;
	  canvas.height = height;
	  c.translate(width >> 1, height >> 1);
	  c.scale(scale, scale);
	  words.forEach(function(word, i) {
	    c.save();
	    c.translate(word.x, word.y);
	    c.rotate(word.rotate * Math.PI / 180);
	    c.textAlign = "center";
	    c.fillStyle = colors[word.facet-1];
	    c.font = word.size + "px " + word.font;
	    c.fillText(word.text, 0, 0);
	    c.restore();
	  });
	  d3.select(this).attr("href", canvas.toDataURL("image/png"));
	}

	function downloadSVG() {
	  d3.select(this).attr("href", "data:image/svg+xml;charset=utf-8;base64," + btoa(unescape(encodeURIComponent(
	    svg.attr("version", "1.1")
	       .attr("xmlns", "http://www.w3.org/2000/svg")
	     .node().parentNode.innerHTML))));
	}

	*/

}
